// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email_verification.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmailVerificationToken = `-- name: CreateEmailVerificationToken :one
insert into email_verification (id, token, user_id, created_at, expires_at)
    values ($1, $2, $3, $4, $5) returning id, token, user_id, created_at, expires_at
`

type CreateEmailVerificationTokenParams struct {
	ID        string
	Token     string
	UserID    string
	CreatedAt pgtype.Timestamp
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateEmailVerificationToken(ctx context.Context, arg CreateEmailVerificationTokenParams) (EmailVerification, error) {
	row := q.db.QueryRow(ctx, createEmailVerificationToken,
		arg.ID,
		arg.Token,
		arg.UserID,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteAllEmailVerificationToken = `-- name: DeleteAllEmailVerificationToken :exec
delete from email_verification where user_id = $1
`

func (q *Queries) DeleteAllEmailVerificationToken(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteAllEmailVerificationToken, userID)
	return err
}

const getEmailVerificationByToken = `-- name: GetEmailVerificationByToken :one
select id, token, user_id, created_at, expires_at from email_verification where token = $1
`

func (q *Queries) GetEmailVerificationByToken(ctx context.Context, token string) (EmailVerification, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationByToken, token)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getEmailVerificationTokenById = `-- name: GetEmailVerificationTokenById :one
select id, token, user_id, created_at, expires_at from email_verification where user_id = $1
`

func (q *Queries) GetEmailVerificationTokenById(ctx context.Context, userID string) (EmailVerification, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationTokenById, userID)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
