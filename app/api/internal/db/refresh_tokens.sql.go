// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshTokens = `-- name: CreateRefreshTokens :one
insert into refresh_tokens (id, token, user_id, created_at, expires_at)
values ($1, $2, $3, $4, $5) returning id, token, user_id, created_at, expires_at
`

type CreateRefreshTokensParams struct {
	ID        string
	Token     string
	UserID    string
	CreatedAt pgtype.Timestamp
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateRefreshTokens(ctx context.Context, arg CreateRefreshTokensParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshTokens,
		arg.ID,
		arg.Token,
		arg.UserID,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteAllRefreshTokens = `-- name: DeleteAllRefreshTokens :exec
delete from refresh_tokens where user_id = $1
`

func (q *Queries) DeleteAllRefreshTokens(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteAllRefreshTokens, userID)
	return err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
select id, token, user_id, created_at, expires_at from refresh_tokens where token = $1
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const refreshTokenExists = `-- name: RefreshTokenExists :one
select exists (select 1 from refresh_tokens where token = $1)
`

func (q *Queries) RefreshTokenExists(ctx context.Context, token string) (bool, error) {
	row := q.db.QueryRow(ctx, refreshTokenExists, token)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
